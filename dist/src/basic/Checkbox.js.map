{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","getBorderRadius","checkboxType","variables","CheckboxRadius","props","color","checked","borderColor","checkStyle","borderRadius","checkboxBgColor","backgroundColor","checkboxDefaultColor","defaultProps","style","getInitialStyle","tickColor","context","theme","variable","platformStyle","platform","_root","c","prepareRootProps","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","marginTop","CheckboxIconMarginTop","textShadowRadius","checkboxTextShadowRadius","PLATFORM","IOS","MATERIAL","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","onPress","func","StyledCheckBox","mapPropsToStyleNames"],"mappings":"21BAAA,4B,2CACA,qC,mDACA,yCACA,4D,iDACA,iEAEA,mE,yEACA,qD,iDACA,2DACA,mD,67BAEMA,S,kZAmBJC,e,CAAkB,SAACC,YAAD,CAAeC,SAAf,CAA6B,CAC7C,GAAID,eAAiB,SAArB,CAAgC,CAC9B,MAAO,GAAP,CACD,CACD,GAAIA,eAAiB,QAArB,CAA+B,CAC7B,MAAO,EAAP,CACD,CACD,MAAOC,WAAUC,cAAjB,CACD,C,6HAtBeD,S,CAAW,YAC6B,KAAKE,KADlC,CACjBC,KADiB,QACjBA,KADiB,CACVC,OADU,QACVA,OADU,CACDL,YADC,QACDA,YADC,CACaM,WADb,QACaA,WADb,CAEzB,MAAO,CACLC,WAAY,CACVC,aAAc,KAAKT,eAAL,CAAqBC,YAArB,CAAmCC,SAAnC,CADJ,CAEVK,YAAaA,aAAeF,KAAf,EAAwBH,UAAUQ,eAFrC,CAGVC,gBACEL,UAAY,IAAZ,CACID,OAASH,UAAUQ,eADvB,CAEIR,UAAUU,oBANN,CADP,CAAP,CAUD,C,0DAYgBV,S,CAAW,CAC1B,GAAMW,cAAe,CACnBC,MAAO,KAAKC,eAAL,CAAqBb,SAArB,EAAgCM,UADpB,CAArB,CAIA,MAAO,2BAAa,KAAKJ,KAAlB,CAAyBS,YAAzB,CAAP,CACD,C,uCACQ,6BACwB,KAAKT,KAD7B,CACCE,OADD,SACCA,OADD,CACUU,SADV,SACUA,SADV,CAEP,GAAMd,WAAY,KAAKe,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDhB,SADnC,CAEdiB,kBAFJ,CAGA,GAAMC,eAAgBlB,UAAUkB,aAAhC,CACA,GAAMC,UAAWnB,UAAUmB,QAA3B,CACA,MACE,+BAAC,6BAAD,WACE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EADP,EAEM,KAAKC,gBAAL,CAAsBtB,SAAtB,CAFN,mDAIE,8BAAC,kBAAD,EACE,MAAO,CACLG,MACEC,UAAY,IAAZ,CACIU,WAAad,UAAUuB,iBAD3B,CAEIvB,UAAUU,oBAJX,CAKLc,SAAUxB,UAAUyB,gBALf,CAMLC,WAAY1B,UAAU2B,gBANjB,CAOLC,UAAW5B,UAAU6B,qBAPhB,CAQLC,iBAAkB9B,UAAU+B,wBARvB,CADT,CAWE,KACEZ,WAAaa,sBAASC,GAAtB,EAA6Bf,gBAAkBc,sBAASE,QAAxD,CACI,eADJ,CAEI,cAdR,iDAJF,CADF,CAwBD,C,sBAnEoBC,gB,EAAjBtC,Q,CACGuC,Y,CAAe,CACpBpB,MAAOqB,oBAAUC,MADG,C,CAqExBzC,SAAS0C,SAAT,aACKC,8BAAiBD,SADtB,EAEE3B,MAAOyB,oBAAUI,SAAV,CAAoB,CACzBJ,oBAAUC,MADe,CAEzBD,oBAAUK,MAFe,CAGzBL,oBAAUM,KAHe,CAApB,CAFT,CAOEvC,QAASiC,oBAAUO,IAPrB,CAQEC,QAASR,oBAAUS,IARrB,GAWA,GAAMC,gBAAiB,yCACrB,qBADqB,CAErB,EAFqB,CAGrBC,8BAHqB,EAIrBnD,QAJqB,CAAvB,C,QAM2BA,Q,CAAlBkD,c","file":"Checkbox.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity } from 'react-native';\nimport IconNB from 'react-native-vector-icons/Ionicons';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\nimport { PLATFORM } from '../theme/variables/commonColor';\nimport computeProps from '../utils/computeProps';\n\nclass CheckBox extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  getInitialStyle(variables) {\n    const { color, checked, checkboxType, borderColor } = this.props;\n    return {\n      checkStyle: {\n        borderRadius: this.getBorderRadius(checkboxType, variables),\n        borderColor: borderColor || color || variables.checkboxBgColor,\n        backgroundColor:\n          checked === true\n            ? color || variables.checkboxBgColor\n            : variables.checkboxDefaultColor\n      }\n    };\n  }\n\n  getBorderRadius = (checkboxType, variables) => {\n    if (checkboxType === 'rounded') {\n      return 13;\n    }\n    if (checkboxType === 'square') {\n      return 0;\n    }\n    return variables.CheckboxRadius;\n  };\n\n  prepareRootProps(variables) {\n    const defaultProps = {\n      style: this.getInitialStyle(variables).checkStyle\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const { checked, tickColor } = this.props;\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n    return (\n      <TouchableOpacity\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps(variables)}\n      >\n        <IconNB\n          style={{\n            color:\n              checked === true\n                ? tickColor || variables.checkboxTickColor\n                : variables.checkboxDefaultColor,\n            fontSize: variables.CheckboxFontSize,\n            lineHeight: variables.CheckboxIconSize,\n            marginTop: variables.CheckboxIconMarginTop,\n            textShadowRadius: variables.checkboxTextShadowRadius\n          }}\n          name={\n            platform === PLATFORM.IOS && platformStyle !== PLATFORM.MATERIAL\n              ? 'ios-checkmark'\n              : 'md-checkmark'\n          }\n        />\n      </TouchableOpacity>\n    );\n  }\n}\n\nCheckBox.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  checked: PropTypes.bool,\n  onPress: PropTypes.func\n};\n\nconst StyledCheckBox = connectStyle(\n  'NativeBase.CheckBox',\n  {},\n  mapPropsToStyleNames\n)(CheckBox);\n\nexport { StyledCheckBox as CheckBox };\n"]}